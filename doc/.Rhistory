library(invgamma)
library(invgamma)
?pinvchisq
c1<-rinvchisq(1000,1,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-pinvchisq(c,21,16/21
ic2<-pinvchisq(c,21,16/21)
?pinvchisq
c1<-rinvchisq(1000,1,1)
c2<-rinvchisq(1000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-pinvchisq(c,21,16/21
ic2<-pinvchisq(c,21,16/21)
?pinvchisq
c1<-rinvchisq(1000,1,1)
c2<-rinvchisq(1000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-dinvchisq(c1,21,16/21
ic2<-dinvchisq(c2,21,16/21)
?pinvchisq
c1<-rinvchisq(1000,1,1)
c2<-rinvchisq(1000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-dinvchisq(c1,21,16/21)
ic2<-dinvchisq(c2,21,15/20)
?pinvchisq
c1<-rinvchisq(1000,1,1)
c2<-rinvchisq(1000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-dinvchisq(c1,21,16/21)
ic2<-dinvchisq(c2,21,15/20)
mean(ic1>0.75)
?matrix
c1<-rinvchisq(100000,1,1)
c2<-rinvchisq(100000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-dinvchisq(c1,21,16/21)
ic2<-dinvchisq(c2,21,15/20)
a<-mean(ic1>0.75^2)
b<-mean(ic1>1)
c<-mean(ic1>1.25^2)
d<-mean(ic2>0.75^2)
e<-mean(ic2>1)
f<-mean(ic2>1.25^2)
?matrix
c1<-rinvchisq(100000,1,1)
c2<-rinvchisq(100000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-dinvchisq(c1,21,16/21)
ic2<-dinvchisq(c2,21,15/20)
a<-mean(ic1>0.75^2)
b<-mean(ic1>1)
c<-mean(ic1>1.25^2)
d<-mean(ic2>0.75^2)
e<-mean(ic2>1)
f<-mean(ic2>1.25^2)
t<- matrix(c(1,2,3,4,5,13),nrow = 2, ncol = 3, byrow = TRUE,dimnames = list(c("v0=1", "v0=0"),c(">0.75", ">1", ">1.25")))
t
?matrix
c1<-rinvchisq(100000,1,1)
c2<-rinvchisq(100000,0,1)
#As we have a imporper prior when v0=0, we take rinvchisq(1000,1,1) as the noninformative prior
ic1<-dinvchisq(c1,21,16/21)
ic2<-dinvchisq(c2,21,15/20)
a<-mean(ic1>0.75^2)
b<-mean(ic1>1)
c<-mean(ic1>1.25^2)
d<-mean(ic2>0.75^2)
e<-mean(ic2>1)
f<-mean(ic2>1.25^2)
t<- matrix(c(a,b,c,d,e,f),nrow = 2, ncol = 3, byrow = TRUE,dimnames = list(c("v0=1", "v0=0"),c(">0.75", ">1", ">1.25")))
t
rm(list=ls())
y1 <- c(+2.0, -3.1, -1.0, +0.2, +0.3, +0.4)
y2 <- c(-3.5, -1.6, -4.6, -0.9, -5.1, +0.1)
y1.bar <- mean(y1); s1 <- sd(y1);
y2.bar <- mean(y2); s2 <- sd(y2);
y1.bar; s1; y2.bar; s2;
?rt
l1<-rnorm(100,-0.2,1.712308/11)
l2<-rnorm(100,-0.2,1.712308/11)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1)
lines(mu2)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1,col="red",lty=3,lwd=2)
lines(mu2)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1,type="1",col="red",lty=2,lwd=2)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1,col="red",lty=2,lwd=2)
lines(mu2)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1,col="red")
lines(mu2)
mu1<-rt(100,11,-0.2)
mu2<-rt(100,11,1.-2.6)
plot(mu1,col="red")
points(mu2)
mean(mu2<mu1)
mean(mu2<mu1)
load("~/GitHub/Spring2021-Project2-group2/output/countries_shapeFile.RData")
shiny::runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_death)
View(ana_age)
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
ana_age<-read.csv("C:/Users/13605/Documents/GitHub/Spring2021-Project2-group2/data/age_ana/ana_age.csv")
ana_death<-read.csv("C:/Users/13605/Documents/GitHub/Spring2021-Project2-group2/data/age_ana/ana_death.csv")
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
output$death_count<- renderPlotly({ggplotly(d_pie)})
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
d_pie
View(ana_death)
ana_age<-read.csv("C:/Users/13605/Documents/GitHub/Spring2021-Project2-group2/data/age_ana/ana_age.csv")
ana_death<-read.csv("C:/Users/13605/Documents/GitHub/Spring2021-Project2-group2/data/age_ana/ana_death.csv")
View(ana_death)
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_age , labels = ~ AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
d_pie
ana_age<-read.csv("C:/Users/13605/Documents/GitHub/Spring2021-Project2-group2/data/age_ana/ana_age.csv", encoding = "UTF-8")
ana_death<-read.csv("C:/Users/13605/Documents/GitHub/Spring2021-Project2-group2/data/age_ana/ana_death.csv", encoding = "UTF-8")
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
d_pie
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show test rate by age
output$test_rate<-renderPlot({
ggplot(data=ana_age, aes(x=AGE_GROUP, y=TEST_RATE)) +
geom_bar(stat="identity",fill="red", width=0.3) +
geom_text(aes(label=round(ana_age$TEST_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
})
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show test rate, case rate, and death rate by age
data <- ana_death
rate <- data %>%plot_ly()
rate <- rate %>% add_trace(x = ~AGE_GROUP, y = ~DEATH_RATE, type = 'bar',
text = DEATH_RATE, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show test rate, case rate, and death rate by age
rate <- plot_ly()
rate <- rate %>% add_trace(data=ana_death,x = ~X.U.FEFF.AGE_GROUP, y = ~DEATH_RATE, type = 'bar',
text = DEATH_RATE, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show test rate, case rate, and death rate by age
rate <- plot_ly()
rate <- rate %>% add_trace(data=ana_death,x =~X.U.FEFF.AGE_GROUP, y =~DEATH_RATE, type = 'bar',
text = DEATH_RATE, textposition = 'auto',
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)', width = 1.5)))
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show case rate by age
case_rate<-renderPlot({
ggplot(data=ana_age, aes(x=AGE_GROUP, y=CASE_RATE)) +
geom_bar(stat="identity",fill="blue", width=0.3) +
geom_text(aes(label=round(ana_age$CASE_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
})
case_rate
#construct a bar plot to show test rate by age
test_rate<-renderPlot({
ggplot(data=ana_age, aes(x=AGE_GROUP, y=TEST_RATE)) +
geom_bar(stat="identity",fill="red", width=0.3) +
geom_text(aes(label=round(ana_age$TEST_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
})
test_rate
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show case rate by age
case_rate<-ggplot(data=ana_death, aes(x=AGE_GROUP, y=CASE_RATE)) +
geom_bar(stat="identity",fill="blue", width=0.3) +
geom_text(aes(label=round(ana_age$CASE_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
case_rate
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show case rate by age
case_rate<-ggplot(data=ana_death, aes(x=X.U.FEFF.AGE_GROUP, y=CASE_RATE)) +
geom_bar(stat="identity",fill="blue", width=0.3) +
geom_text(aes(label=round(ana_age$CASE_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
case_rate
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show case rate by age
case_rate<-ggplot(data=ana_death, aes(x=X.U.FEFF.AGE_GROUP, y=CASE_RATE)) +
geom_bar(stat="identity",fill="blue", width=0.3) +
geom_text(aes(label=round(ana_death$CASE_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
case_rate
#construct a bar plot to show test rate by age
test_rate<-ggplot(data=ana_death,aes(x=X.U.FEFF.AGE_GROUP, y=TEST_RATE)) +
geom_bar(stat="identity",fill="red", width=0.3) +
geom_text(aes(label=round(ana_death$TEST_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
})
#construct a pie chart to show death count distribution by age
d_pie <- plot_ly()
d_pie<-d_pie %>% add_pie(data = ana_death , labels = ~ X.U.FEFF.AGE_GROUP, values = ~DEATH_COUNT,
name = "Age_GROUP",title = "Age_GROUP",domain = list(row = 0, column = 0))
#construct a bar plot to show case rate by age
case_rate<-ggplot(data=ana_death, aes(x=X.U.FEFF.AGE_GROUP, y=CASE_RATE)) +
geom_bar(stat="identity",fill="blue", width=0.3) +
geom_text(aes(label=round(CASE_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
case_rate
#construct a bar plot to show test rate by age
test_rate<-ggplot(data=ana_death,aes(x=X.U.FEFF.AGE_GROUP, y=TEST_RATE)) +
geom_bar(stat="identity",fill="red", width=0.3) +
geom_text(aes(label=round(TEST_RATE)), position=position_dodge(width=0.9), vjust=-0.25) +
theme_light()
test_rate
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
shiny::runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
runApp()
runApp('GitHub/Spring2021-Project2-group2/app')
shiny::runApp('GitHub/Spring2021-Project2-group2/app')
shiny::runApp('GitHub/Spring2021-Project2-group2/app')
runApp('GitHub/Spring2021-Project2-group2/app')
#training dataset
library(tidyr)
train_3 <- read.table("train_3.txt", header=FALSE, sep=",")
train_5 <- read.table("train_5.txt", header=FALSE, sep=",")
train_8 <- read.table("train_8.txt", header=FALSE, sep=",")
train_3$label <- 3
train_5$label <- 5
train_8$label <- 8
train_data<-rbind(train_3,train_5,train_8)
#testing data set
test_data <- read.table("zip_test.txt")
colnames(test_data) <- c("label",colnames(test_data)[-257])
test_3 <- test_data[test_data[, 1] == 3, ]
test_5 <- test_data[test_data[, 1] == 5, ]
test_8 <- test_data[test_data[, 1] == 8, ]
test_data <- rbind(test_3, test_5, test_8)
library(MASS)
train_data<-data.frame(train_data)
lda.model<-lda(label ~. , data=train_data)
lda.pred_tr1 = predict(lda.model, train_data)
lda.pred_te1 = predict(lda.model, test_data)
table_train_1 <- table(train_data$label, lda.pred_tr1$class)
(train_error_1 <- 1 - sum(diag(table_train_1)) / nrow(train_data))
table_test_1 <- table(test_data$label, lda.pred_te1$class)
(test_error_1 <- 1 - sum(diag(table_test_1)) / nrow(test_data))
library(MASS)
train_data<-data.frame(train_data)
lda.model<-lda(label ~. , data=train_data)
lda.pred_tr1 = predict(lda.model, train_data)
lda.pred_te1 = predict(lda.model, test_data)
table_train_1 <- table(train_data$label, lda.pred_tr1$class)
(train_error_1 <- 1 - sum(diag(table_train_1)) / nrow(train_data))
table_test_1 <- table(test_data$label, lda.pred_te1$class)
(test_error_1 <- 1 - sum(diag(table_test_1)) / nrow(test_data))
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
set.seed(2020)
setwd("E:/project3/Spring2021-Project3-group-2/doc")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv <- TRUE # run cross-validation on the training set
sample.reweight <- TRUE # run sample reweighting in model training
K <- 5  # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test <- TRUE # run evaluation on an independent test set
run.feature.test <- TRUE # process features for test set
lmbd = c(1e-3, 5e-3, 1e-2, 5e-2, 1e-1)
model_labels = paste("LASSO Penalty with lambda =", lmbd)
#train-test split
info <- read.csv(train_label_path)
# setwd("~/Spring2021-Project3-group-2")
label_list <- read.csv("./data/train_set/label.csv")
# setwd("~/Spring2021-Project3-group-2")
label_list <- read.csv("../data/train_set/label.csv")
#train-test split
info <- read.csv(train_label_path)
n_files <- length(list.files(train_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
#train-test split
info <- read.csv(train_label_path)
n_files <- length(list.files(train_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
}
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index, dir){
return(round(readMat(paste0(dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix, dir = train_pt_dir)
# Plot a sample image of each class
PlotSample <- function(label_num){
sample_image <- load.image(paste0(train_image_dir, sprintf("%04d", label_num), ".jpg"))
pts_df <- data.frame(fiducial_pt_list[label_num])
# Point 38 marks the tip of nose, which is at the center of the face,
# so use point 38 to crop the image
pts_center <- pts_df[38,]
# crop a 600*600 area
cropped<- imsub(sample_image,x %inr% c(pts_center$X1-300,pts_center$X1+300),
y %inr% c(pts_center$X2-300,pts_center$X1+300))
pts_df <- pts_df %>%
dplyr::mutate(X1 = X1 - (pts_center$X1-300),
X2 = X2 - (pts_center$X2-300))
plot(cropped, axes=F, main = paste0("Class: ", info$label[label_num]))
points(pts_df,col="white", pch=20)
points(pts_df[c(19:23, 27:31, 50:63),],col="red", pch=20)
for (i in 1:78) {
text(x = pts_df$X1[i], y = pts_df$X2[i],
i,                     # text content
col = "blue",
cex = 0.5)
}
}
PlotSample(1)
source("../lib/feature.R")
# read feature set 0
tm_feature0_train <- NA
if(run.feature.train){
tm_feature0_train <- system.time(feature0_train <- feature(fiducial_pt_list, train_idx))
save(feature0_train, file="../output/feature_set0_train.RData")
}else{
load(file="../output/feature_set0_train.RData")
}
# Plot a sample image of each class
PlotSample <- function(label_num){
sample_image <- load.image(paste0(train_image_dir, sprintf("%04d", label_num), ".jpg"))
pts_df <- data.frame(fiducial_pt_list[label_num])
# Point 38 marks the tip of nose, which is at the center of the face,
# so use point 38 to crop the image
pts_center <- pts_df[38,]
# crop a 600*600 area
cropped<- imsub(sample_image,x %inr% c(pts_center$X1-300,pts_center$X1+300),
y %inr% c(pts_center$X2-300,pts_center$X1+300))
pts_df <- pts_df %>%
dplyr::mutate(X1 = X1 - (pts_center$X1-300),
X2 = X2 - (pts_center$X2-300))
plot(cropped, axes=F, main = paste0("Class: ", info$label[label_num]))
points(pts_df,col="white", pch=20)
points(pts_df[c(19:23, 27:31, 50:63),],col="red", pch=20)
for (i in 1:78) {
text(x = pts_df$X1[i], y = pts_df$X2[i],
i,                     # text content
col = "blue",
cex = 0.5)
}
}
PlotSample(1)
#train-test split
info <- read.csv(train_label_path)
n_files <- length(list.files(train_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
}
n_files <- length(list.files(train_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
}
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index, dir){
return(round(readMat(paste0(dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix, dir = train_pt_dir)
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index, dir){
return(round(readMat(paste0(dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix, dir = train_pt_dir)
